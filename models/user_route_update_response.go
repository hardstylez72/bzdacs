// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserRouteUpdateResponse user route update response
//
// swagger:model userRouteUpdateResponse
type UserRouteUpdateResponse struct {

	// created at
	// Required: true
	CreatedAt *string `json:"createdAt"`

	// deleted at
	DeletedAt *string `json:"deletedAt,omitempty"`

	// description
	// Required: true
	Description *string `json:"description"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// is excluded
	// Required: true
	IsExcluded *bool `json:"isExcluded"`

	// method
	// Required: true
	Method *string `json:"method"`

	// namespace Id
	// Required: true
	NamespaceID *int64 `json:"namespaceId"`

	// route
	// Required: true
	Route *string `json:"route"`

	// tags
	// Required: true
	Tags []string `json:"tags"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updatedAt"`
}

// Validate validates this user route update response
func (m *UserRouteUpdateResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsExcluded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserRouteUpdateResponse) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *UserRouteUpdateResponse) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *UserRouteUpdateResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *UserRouteUpdateResponse) validateIsExcluded(formats strfmt.Registry) error {

	if err := validate.Required("isExcluded", "body", m.IsExcluded); err != nil {
		return err
	}

	return nil
}

func (m *UserRouteUpdateResponse) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	return nil
}

func (m *UserRouteUpdateResponse) validateNamespaceID(formats strfmt.Registry) error {

	if err := validate.Required("namespaceId", "body", m.NamespaceID); err != nil {
		return err
	}

	return nil
}

func (m *UserRouteUpdateResponse) validateRoute(formats strfmt.Registry) error {

	if err := validate.Required("route", "body", m.Route); err != nil {
		return err
	}

	return nil
}

func (m *UserRouteUpdateResponse) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

func (m *UserRouteUpdateResponse) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user route update response based on context it is used
func (m *UserRouteUpdateResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserRouteUpdateResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserRouteUpdateResponse) UnmarshalBinary(b []byte) error {
	var res UserRouteUpdateResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
