// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	UserCreate(params *UserCreateParams, opts ...ClientOption) (*UserCreateOK, error)

	UserDelete(params *UserDeleteParams, opts ...ClientOption) (*UserDeleteOK, error)

	UserGetByID(params *UserGetByIDParams, opts ...ClientOption) (*UserGetByIDOK, error)

	UserGetByLogin(params *UserGetByLoginParams, opts ...ClientOption) (*UserGetByLoginOK, error)

	UserList(params *UserListParams, opts ...ClientOption) (*UserListOK, error)

	UserUpdate(params *UserUpdateParams, opts ...ClientOption) (*UserUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  UserCreate Creates user
*/
func (a *Client) UserCreate(params *UserCreateParams, opts ...ClientOption) (*UserCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "user.create",
		Method:             "POST",
		PathPattern:        "/v1/user/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user.create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserDelete Deletes user by id
*/
func (a *Client) UserDelete(params *UserDeleteParams, opts ...ClientOption) (*UserDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "user.delete",
		Method:             "POST",
		PathPattern:        "/v1/user/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user.delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserGetByID Gets user by id
*/
func (a *Client) UserGetByID(params *UserGetByIDParams, opts ...ClientOption) (*UserGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "user.getById",
		Method:             "POST",
		PathPattern:        "/v1/user/getById",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserGetByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserGetByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user.getById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserGetByLogin Gets user by login
*/
func (a *Client) UserGetByLogin(params *UserGetByLoginParams, opts ...ClientOption) (*UserGetByLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetByLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "user.getByLogin",
		Method:             "POST",
		PathPattern:        "/v1/user/getByLogin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserGetByLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserGetByLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user.getByLogin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserList Gets list of users
*/
func (a *Client) UserList(params *UserListParams, opts ...ClientOption) (*UserListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "user.list",
		Method:             "POST",
		PathPattern:        "/v1/user/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user.list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserUpdate Updates user
*/
func (a *Client) UserUpdate(params *UserUpdateParams, opts ...ClientOption) (*UserUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "user.update",
		Method:             "POST",
		PathPattern:        "/v1/user/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for user.update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
