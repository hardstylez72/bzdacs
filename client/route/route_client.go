// Code generated by go-swagger; DO NOT EDIT.

package route

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new route API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for route API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RouteCreate(params *RouteCreateParams, opts ...ClientOption) (*RouteCreateOK, error)

	RouteDelete(params *RouteDeleteParams, opts ...ClientOption) (*RouteDeleteOK, error)

	RouteGetByID(params *RouteGetByIDParams, opts ...ClientOption) (*RouteGetByIDOK, error)

	RouteGetByParams(params *RouteGetByParamsParams, opts ...ClientOption) (*RouteGetByParamsOK, error)

	RouteUpdate(params *RouteUpdateParams, opts ...ClientOption) (*RouteUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  RouteCreate Creates route
*/
func (a *Client) RouteCreate(params *RouteCreateParams, opts ...ClientOption) (*RouteCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "route.create",
		Method:             "POST",
		PathPattern:        "/v1/route/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RouteCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for route.create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteDelete Deletes route
*/
func (a *Client) RouteDelete(params *RouteDeleteParams, opts ...ClientOption) (*RouteDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "route.delete",
		Method:             "POST",
		PathPattern:        "/v1/route/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RouteDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for route.delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteGetByID Gets route by id
*/
func (a *Client) RouteGetByID(params *RouteGetByIDParams, opts ...ClientOption) (*RouteGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteGetByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "route.getById",
		Method:             "POST",
		PathPattern:        "/v1/route/getById",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RouteGetByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for route.getById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteGetByParams Gets route by params
*/
func (a *Client) RouteGetByParams(params *RouteGetByParamsParams, opts ...ClientOption) (*RouteGetByParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteGetByParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "route.getByParams",
		Method:             "POST",
		PathPattern:        "/v1/route/getByParams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RouteGetByParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetByParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for route.getByParams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteUpdate Updates route
*/
func (a *Client) RouteUpdate(params *RouteUpdateParams, opts ...ClientOption) (*RouteUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "route.update",
		Method:             "POST",
		PathPattern:        "/v1/route/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RouteUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for route.update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
