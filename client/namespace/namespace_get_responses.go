// Code generated by go-swagger; DO NOT EDIT.

package namespace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hardstylez72/bzdacs/models"
)

// NamespaceGetReader is a Reader for the NamespaceGet structure.
type NamespaceGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NamespaceGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNamespaceGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNamespaceGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNamespaceGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewNamespaceGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewNamespaceGetOK creates a NamespaceGetOK with default headers values
func NewNamespaceGetOK() *NamespaceGetOK {
	return &NamespaceGetOK{}
}

/* NamespaceGetOK describes a response with status code 200, with default header values.

OK
*/
type NamespaceGetOK struct {
	Payload *models.NamespaceGetResponse
}

func (o *NamespaceGetOK) Error() string {
	return fmt.Sprintf("[POST /v1/namespace/get][%d] namespaceGetOK  %+v", 200, o.Payload)
}
func (o *NamespaceGetOK) GetPayload() *models.NamespaceGetResponse {
	return o.Payload
}

func (o *NamespaceGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NamespaceGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamespaceGetBadRequest creates a NamespaceGetBadRequest with default headers values
func NewNamespaceGetBadRequest() *NamespaceGetBadRequest {
	return &NamespaceGetBadRequest{}
}

/* NamespaceGetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type NamespaceGetBadRequest struct {
	Payload *models.UtilResponseWithError
}

func (o *NamespaceGetBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/namespace/get][%d] namespaceGetBadRequest  %+v", 400, o.Payload)
}
func (o *NamespaceGetBadRequest) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *NamespaceGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamespaceGetNotFound creates a NamespaceGetNotFound with default headers values
func NewNamespaceGetNotFound() *NamespaceGetNotFound {
	return &NamespaceGetNotFound{}
}

/* NamespaceGetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type NamespaceGetNotFound struct {
	Payload *models.UtilResponseWithError
}

func (o *NamespaceGetNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/namespace/get][%d] namespaceGetNotFound  %+v", 404, o.Payload)
}
func (o *NamespaceGetNotFound) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *NamespaceGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNamespaceGetInternalServerError creates a NamespaceGetInternalServerError with default headers values
func NewNamespaceGetInternalServerError() *NamespaceGetInternalServerError {
	return &NamespaceGetInternalServerError{}
}

/* NamespaceGetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type NamespaceGetInternalServerError struct {
	Payload *models.UtilResponseWithError
}

func (o *NamespaceGetInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/namespace/get][%d] namespaceGetInternalServerError  %+v", 500, o.Payload)
}
func (o *NamespaceGetInternalServerError) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *NamespaceGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
