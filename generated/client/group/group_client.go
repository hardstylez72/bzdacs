// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GroupCreate(params *GroupCreateParams, opts ...ClientOption) (*GroupCreateOK, error)

	GroupDelete(params *GroupDeleteParams, opts ...ClientOption) (*GroupDeleteOK, error)

	GroupGetByCode(params *GroupGetByCodeParams, opts ...ClientOption) (*GroupGetByCodeOK, error)

	GroupGetByID(params *GroupGetByIDParams, opts ...ClientOption) (*GroupGetByIDOK, error)

	GroupList(params *GroupListParams, opts ...ClientOption) (*GroupListOK, error)

	GroupUpdate(params *GroupUpdateParams, opts ...ClientOption) (*GroupUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GroupCreate Creates group
*/
func (a *Client) GroupCreate(params *GroupCreateParams, opts ...ClientOption) (*GroupCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "group.create",
		Method:             "POST",
		PathPattern:        "/v1/group/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for group.create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GroupDelete Deletes group
*/
func (a *Client) GroupDelete(params *GroupDeleteParams, opts ...ClientOption) (*GroupDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "group.delete",
		Method:             "POST",
		PathPattern:        "/v1/group/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for group.delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GroupGetByCode Gets group by code
*/
func (a *Client) GroupGetByCode(params *GroupGetByCodeParams, opts ...ClientOption) (*GroupGetByCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupGetByCodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "group.getByCode",
		Method:             "POST",
		PathPattern:        "/v1/group/getByCode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupGetByCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupGetByCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for group.getByCode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GroupGetByID Gets group by id
*/
func (a *Client) GroupGetByID(params *GroupGetByIDParams, opts ...ClientOption) (*GroupGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupGetByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "group.getById",
		Method:             "POST",
		PathPattern:        "/v1/group/getById",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupGetByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupGetByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for group.getById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GroupList List groups
*/
func (a *Client) GroupList(params *GroupListParams, opts ...ClientOption) (*GroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "group.list",
		Method:             "POST",
		PathPattern:        "/v1/group/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for group.list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GroupUpdate Updates group
*/
func (a *Client) GroupUpdate(params *GroupUpdateParams, opts ...ClientOption) (*GroupUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "group.update",
		Method:             "POST",
		PathPattern:        "/v1/group/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for group.update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
