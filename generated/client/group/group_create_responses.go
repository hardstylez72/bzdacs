// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hardstylez72/bzdacs/generated/models"
)

// GroupCreateReader is a Reader for the GroupCreate structure.
type GroupCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GroupCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGroupCreateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGroupCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGroupCreateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGroupCreateOK creates a GroupCreateOK with default headers values
func NewGroupCreateOK() *GroupCreateOK {
	return &GroupCreateOK{}
}

/* GroupCreateOK describes a response with status code 200, with default header values.

OK
*/
type GroupCreateOK struct {
	Payload *models.GroupGetResponse
}

func (o *GroupCreateOK) Error() string {
	return fmt.Sprintf("[POST /v1/group/create][%d] groupCreateOK  %+v", 200, o.Payload)
}
func (o *GroupCreateOK) GetPayload() *models.GroupGetResponse {
	return o.Payload
}

func (o *GroupCreateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GroupGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGroupCreateBadRequest creates a GroupCreateBadRequest with default headers values
func NewGroupCreateBadRequest() *GroupCreateBadRequest {
	return &GroupCreateBadRequest{}
}

/* GroupCreateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GroupCreateBadRequest struct {
	Payload *models.UtilResponseWithError
}

func (o *GroupCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/group/create][%d] groupCreateBadRequest  %+v", 400, o.Payload)
}
func (o *GroupCreateBadRequest) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *GroupCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGroupCreateInternalServerError creates a GroupCreateInternalServerError with default headers values
func NewGroupCreateInternalServerError() *GroupCreateInternalServerError {
	return &GroupCreateInternalServerError{}
}

/* GroupCreateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GroupCreateInternalServerError struct {
	Payload *models.UtilResponseWithError
}

func (o *GroupCreateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/group/create][%d] groupCreateInternalServerError  %+v", 500, o.Payload)
}
func (o *GroupCreateInternalServerError) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *GroupCreateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
