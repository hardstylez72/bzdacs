// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new system API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SystemCreate(params *SystemCreateParams, opts ...ClientOption) (*SystemCreateOK, error)

	SystemDelete(params *SystemDeleteParams, opts ...ClientOption) (*SystemDeleteOK, error)

	SystemGet(params *SystemGetParams, opts ...ClientOption) (*SystemGetOK, error)

	SystemList(params *SystemListParams, opts ...ClientOption) (*SystemListOK, error)

	SystemUpdate(params *SystemUpdateParams, opts ...ClientOption) (*SystemUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SystemCreate Creates system
*/
func (a *Client) SystemCreate(params *SystemCreateParams, opts ...ClientOption) (*SystemCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "system.create",
		Method:             "POST",
		PathPattern:        "/v1/system/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for system.create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemDelete Deletes system by id
*/
func (a *Client) SystemDelete(params *SystemDeleteParams, opts ...ClientOption) (*SystemDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "system.delete",
		Method:             "POST",
		PathPattern:        "/v1/system/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for system.delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemGet Gets system by multiple params
*/
func (a *Client) SystemGet(params *SystemGetParams, opts ...ClientOption) (*SystemGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "system.get",
		Method:             "POST",
		PathPattern:        "/v1/system/get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for system.get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemList Gets system list
*/
func (a *Client) SystemList(params *SystemListParams, opts ...ClientOption) (*SystemListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "system.list",
		Method:             "POST",
		PathPattern:        "/v1/system/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for system.list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemUpdate Updates system
*/
func (a *Client) SystemUpdate(params *SystemUpdateParams, opts ...ClientOption) (*SystemUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "system.update",
		Method:             "POST",
		PathPattern:        "/v1/system/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for system.update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
