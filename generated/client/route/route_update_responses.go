// Code generated by go-swagger; DO NOT EDIT.

package route

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hardstylez72/bzdacs/generated/models"
)

// RouteUpdateReader is a Reader for the RouteUpdate structure.
type RouteUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RouteUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRouteUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRouteUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRouteUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRouteUpdateOK creates a RouteUpdateOK with default headers values
func NewRouteUpdateOK() *RouteUpdateOK {
	return &RouteUpdateOK{}
}

/* RouteUpdateOK describes a response with status code 200, with default header values.

OK
*/
type RouteUpdateOK struct {
	Payload *models.RouteGetResponse
}

func (o *RouteUpdateOK) Error() string {
	return fmt.Sprintf("[POST /v1/route/update][%d] routeUpdateOK  %+v", 200, o.Payload)
}
func (o *RouteUpdateOK) GetPayload() *models.RouteGetResponse {
	return o.Payload
}

func (o *RouteUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RouteGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRouteUpdateBadRequest creates a RouteUpdateBadRequest with default headers values
func NewRouteUpdateBadRequest() *RouteUpdateBadRequest {
	return &RouteUpdateBadRequest{}
}

/* RouteUpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RouteUpdateBadRequest struct {
	Payload *models.UtilResponseWithError
}

func (o *RouteUpdateBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/route/update][%d] routeUpdateBadRequest  %+v", 400, o.Payload)
}
func (o *RouteUpdateBadRequest) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *RouteUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRouteUpdateInternalServerError creates a RouteUpdateInternalServerError with default headers values
func NewRouteUpdateInternalServerError() *RouteUpdateInternalServerError {
	return &RouteUpdateInternalServerError{}
}

/* RouteUpdateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RouteUpdateInternalServerError struct {
	Payload *models.UtilResponseWithError
}

func (o *RouteUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/route/update][%d] routeUpdateInternalServerError  %+v", 500, o.Payload)
}
func (o *RouteUpdateInternalServerError) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *RouteUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
