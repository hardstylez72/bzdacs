// Code generated by go-swagger; DO NOT EDIT.

package route

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hardstylez72/bzdacs/generated/models"
)

// RouteListReader is a Reader for the RouteList structure.
type RouteListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RouteListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRouteListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRouteListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRouteListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRouteListOK creates a RouteListOK with default headers values
func NewRouteListOK() *RouteListOK {
	return &RouteListOK{}
}

/* RouteListOK describes a response with status code 200, with default header values.

OK
*/
type RouteListOK struct {
	Payload *models.RouteListResponse
}

func (o *RouteListOK) Error() string {
	return fmt.Sprintf("[POST /v1/route/list][%d] routeListOK  %+v", 200, o.Payload)
}
func (o *RouteListOK) GetPayload() *models.RouteListResponse {
	return o.Payload
}

func (o *RouteListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RouteListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRouteListBadRequest creates a RouteListBadRequest with default headers values
func NewRouteListBadRequest() *RouteListBadRequest {
	return &RouteListBadRequest{}
}

/* RouteListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RouteListBadRequest struct {
	Payload *models.UtilResponseWithError
}

func (o *RouteListBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/route/list][%d] routeListBadRequest  %+v", 400, o.Payload)
}
func (o *RouteListBadRequest) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *RouteListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRouteListInternalServerError creates a RouteListInternalServerError with default headers values
func NewRouteListInternalServerError() *RouteListInternalServerError {
	return &RouteListInternalServerError{}
}

/* RouteListInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RouteListInternalServerError struct {
	Payload *models.UtilResponseWithError
}

func (o *RouteListInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/route/list][%d] routeListInternalServerError  %+v", 500, o.Payload)
}
func (o *RouteListInternalServerError) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *RouteListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
