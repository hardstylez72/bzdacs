// Code generated by go-swagger; DO NOT EDIT.

package route

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hardstylez72/bzdacs/generated/models"
)

// RouteCreateReader is a Reader for the RouteCreate structure.
type RouteCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RouteCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRouteCreateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRouteCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRouteCreateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRouteCreateOK creates a RouteCreateOK with default headers values
func NewRouteCreateOK() *RouteCreateOK {
	return &RouteCreateOK{}
}

/* RouteCreateOK describes a response with status code 200, with default header values.

OK
*/
type RouteCreateOK struct {
	Payload *models.RouteGetResponse
}

func (o *RouteCreateOK) Error() string {
	return fmt.Sprintf("[POST /v1/route/create][%d] routeCreateOK  %+v", 200, o.Payload)
}
func (o *RouteCreateOK) GetPayload() *models.RouteGetResponse {
	return o.Payload
}

func (o *RouteCreateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RouteGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRouteCreateBadRequest creates a RouteCreateBadRequest with default headers values
func NewRouteCreateBadRequest() *RouteCreateBadRequest {
	return &RouteCreateBadRequest{}
}

/* RouteCreateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RouteCreateBadRequest struct {
	Payload *models.UtilResponseWithError
}

func (o *RouteCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/route/create][%d] routeCreateBadRequest  %+v", 400, o.Payload)
}
func (o *RouteCreateBadRequest) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *RouteCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRouteCreateInternalServerError creates a RouteCreateInternalServerError with default headers values
func NewRouteCreateInternalServerError() *RouteCreateInternalServerError {
	return &RouteCreateInternalServerError{}
}

/* RouteCreateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RouteCreateInternalServerError struct {
	Payload *models.UtilResponseWithError
}

func (o *RouteCreateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/route/create][%d] routeCreateInternalServerError  %+v", 500, o.Payload)
}
func (o *RouteCreateInternalServerError) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *RouteCreateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
