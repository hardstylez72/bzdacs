// Code generated by go-swagger; DO NOT EDIT.

package tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tag API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tag API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	TagCreate(params *TagCreateParams, opts ...ClientOption) (*TagCreateOK, error)

	TagDelete(params *TagDeleteParams, opts ...ClientOption) (*TagDeleteOK, error)

	TagGet(params *TagGetParams, opts ...ClientOption) (*TagGetOK, error)

	TagList(params *TagListParams, opts ...ClientOption) (*TagListOK, error)

	TagUpdate(params *TagUpdateParams, opts ...ClientOption) (*TagUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TagCreate Creates tag
*/
func (a *Client) TagCreate(params *TagCreateParams, opts ...ClientOption) (*TagCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tag.create",
		Method:             "POST",
		PathPattern:        "/v1/tag/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TagCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tag.create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TagDelete Deletes tag
*/
func (a *Client) TagDelete(params *TagDeleteParams, opts ...ClientOption) (*TagDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tag.delete",
		Method:             "POST",
		PathPattern:        "/v1/tag/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TagDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tag.delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TagGet Gets tag
*/
func (a *Client) TagGet(params *TagGetParams, opts ...ClientOption) (*TagGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tag.get",
		Method:             "POST",
		PathPattern:        "/v1/tag/get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TagGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tag.get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TagList List tags
*/
func (a *Client) TagList(params *TagListParams, opts ...ClientOption) (*TagListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tag.list",
		Method:             "POST",
		PathPattern:        "/v1/tag/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TagListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tag.list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TagUpdate Updates tag
*/
func (a *Client) TagUpdate(params *TagUpdateParams, opts ...ClientOption) (*TagUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tag.update",
		Method:             "POST",
		PathPattern:        "/v1/tag/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TagUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tag.update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
