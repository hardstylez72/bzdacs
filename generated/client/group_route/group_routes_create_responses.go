// Code generated by go-swagger; DO NOT EDIT.

package group_route

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hardstylez72/bzdacs/generated/models"
)

// GroupRoutesCreateReader is a Reader for the GroupRoutesCreate structure.
type GroupRoutesCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GroupRoutesCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGroupRoutesCreateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGroupRoutesCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGroupRoutesCreateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGroupRoutesCreateOK creates a GroupRoutesCreateOK with default headers values
func NewGroupRoutesCreateOK() *GroupRoutesCreateOK {
	return &GroupRoutesCreateOK{}
}

/* GroupRoutesCreateOK describes a response with status code 200, with default header values.

OK
*/
type GroupRoutesCreateOK struct {
	Payload []*models.GroupRouteRoute
}

func (o *GroupRoutesCreateOK) Error() string {
	return fmt.Sprintf("[POST /v1/group/route/create][%d] groupRoutesCreateOK  %+v", 200, o.Payload)
}
func (o *GroupRoutesCreateOK) GetPayload() []*models.GroupRouteRoute {
	return o.Payload
}

func (o *GroupRoutesCreateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGroupRoutesCreateBadRequest creates a GroupRoutesCreateBadRequest with default headers values
func NewGroupRoutesCreateBadRequest() *GroupRoutesCreateBadRequest {
	return &GroupRoutesCreateBadRequest{}
}

/* GroupRoutesCreateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GroupRoutesCreateBadRequest struct {
	Payload *models.UtilResponseWithError
}

func (o *GroupRoutesCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/group/route/create][%d] groupRoutesCreateBadRequest  %+v", 400, o.Payload)
}
func (o *GroupRoutesCreateBadRequest) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *GroupRoutesCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGroupRoutesCreateInternalServerError creates a GroupRoutesCreateInternalServerError with default headers values
func NewGroupRoutesCreateInternalServerError() *GroupRoutesCreateInternalServerError {
	return &GroupRoutesCreateInternalServerError{}
}

/* GroupRoutesCreateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GroupRoutesCreateInternalServerError struct {
	Payload *models.UtilResponseWithError
}

func (o *GroupRoutesCreateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/group/route/create][%d] groupRoutesCreateInternalServerError  %+v", 500, o.Payload)
}
func (o *GroupRoutesCreateInternalServerError) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *GroupRoutesCreateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
