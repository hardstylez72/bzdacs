// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hardstylez72/bzdacs/generated/models"
)

// UserUpdateReader is a Reader for the UserUpdate structure.
type UserUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUserUpdateOK creates a UserUpdateOK with default headers values
func NewUserUpdateOK() *UserUpdateOK {
	return &UserUpdateOK{}
}

/* UserUpdateOK describes a response with status code 200, with default header values.

OK
*/
type UserUpdateOK struct {
	Payload *models.UserGetResponse
}

func (o *UserUpdateOK) Error() string {
	return fmt.Sprintf("[POST /v1/user/update][%d] userUpdateOK  %+v", 200, o.Payload)
}
func (o *UserUpdateOK) GetPayload() *models.UserGetResponse {
	return o.Payload
}

func (o *UserUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserUpdateBadRequest creates a UserUpdateBadRequest with default headers values
func NewUserUpdateBadRequest() *UserUpdateBadRequest {
	return &UserUpdateBadRequest{}
}

/* UserUpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UserUpdateBadRequest struct {
	Payload *models.UtilResponseWithError
}

func (o *UserUpdateBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/user/update][%d] userUpdateBadRequest  %+v", 400, o.Payload)
}
func (o *UserUpdateBadRequest) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *UserUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserUpdateInternalServerError creates a UserUpdateInternalServerError with default headers values
func NewUserUpdateInternalServerError() *UserUpdateInternalServerError {
	return &UserUpdateInternalServerError{}
}

/* UserUpdateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UserUpdateInternalServerError struct {
	Payload *models.UtilResponseWithError
}

func (o *UserUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/user/update][%d] userUpdateInternalServerError  %+v", 500, o.Payload)
}
func (o *UserUpdateInternalServerError) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *UserUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
