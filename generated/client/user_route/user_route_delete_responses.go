// Code generated by go-swagger; DO NOT EDIT.

package user_route

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hardstylez72/bzdacs/generated/models"
)

// UserRouteDeleteReader is a Reader for the UserRouteDelete structure.
type UserRouteDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserRouteDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserRouteDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserRouteDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserRouteDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUserRouteDeleteOK creates a UserRouteDeleteOK with default headers values
func NewUserRouteDeleteOK() *UserRouteDeleteOK {
	return &UserRouteDeleteOK{}
}

/* UserRouteDeleteOK describes a response with status code 200, with default header values.

UserRouteDeleteOK user route delete o k
*/
type UserRouteDeleteOK struct {
}

func (o *UserRouteDeleteOK) Error() string {
	return fmt.Sprintf("[POST /v1/user/route/delete][%d] userRouteDeleteOK ", 200)
}

func (o *UserRouteDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserRouteDeleteBadRequest creates a UserRouteDeleteBadRequest with default headers values
func NewUserRouteDeleteBadRequest() *UserRouteDeleteBadRequest {
	return &UserRouteDeleteBadRequest{}
}

/* UserRouteDeleteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UserRouteDeleteBadRequest struct {
	Payload *models.UtilResponseWithError
}

func (o *UserRouteDeleteBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/user/route/delete][%d] userRouteDeleteBadRequest  %+v", 400, o.Payload)
}
func (o *UserRouteDeleteBadRequest) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *UserRouteDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserRouteDeleteInternalServerError creates a UserRouteDeleteInternalServerError with default headers values
func NewUserRouteDeleteInternalServerError() *UserRouteDeleteInternalServerError {
	return &UserRouteDeleteInternalServerError{}
}

/* UserRouteDeleteInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UserRouteDeleteInternalServerError struct {
	Payload *models.UtilResponseWithError
}

func (o *UserRouteDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/user/route/delete][%d] userRouteDeleteInternalServerError  %+v", 500, o.Payload)
}
func (o *UserRouteDeleteInternalServerError) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *UserRouteDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
