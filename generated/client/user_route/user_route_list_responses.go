// Code generated by go-swagger; DO NOT EDIT.

package user_route

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hardstylez72/bzdacs/generated/models"
)

// UserRouteListReader is a Reader for the UserRouteList structure.
type UserRouteListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserRouteListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserRouteListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserRouteListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserRouteListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUserRouteListOK creates a UserRouteListOK with default headers values
func NewUserRouteListOK() *UserRouteListOK {
	return &UserRouteListOK{}
}

/* UserRouteListOK describes a response with status code 200, with default header values.

OK
*/
type UserRouteListOK struct {
	Payload *models.UserRouteListResponse
}

func (o *UserRouteListOK) Error() string {
	return fmt.Sprintf("[POST /v1/user/route/list][%d] userRouteListOK  %+v", 200, o.Payload)
}
func (o *UserRouteListOK) GetPayload() *models.UserRouteListResponse {
	return o.Payload
}

func (o *UserRouteListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserRouteListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserRouteListBadRequest creates a UserRouteListBadRequest with default headers values
func NewUserRouteListBadRequest() *UserRouteListBadRequest {
	return &UserRouteListBadRequest{}
}

/* UserRouteListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UserRouteListBadRequest struct {
	Payload *models.UtilResponseWithError
}

func (o *UserRouteListBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/user/route/list][%d] userRouteListBadRequest  %+v", 400, o.Payload)
}
func (o *UserRouteListBadRequest) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *UserRouteListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserRouteListInternalServerError creates a UserRouteListInternalServerError with default headers values
func NewUserRouteListInternalServerError() *UserRouteListInternalServerError {
	return &UserRouteListInternalServerError{}
}

/* UserRouteListInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UserRouteListInternalServerError struct {
	Payload *models.UtilResponseWithError
}

func (o *UserRouteListInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/user/route/list][%d] userRouteListInternalServerError  %+v", 500, o.Payload)
}
func (o *UserRouteListInternalServerError) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *UserRouteListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
