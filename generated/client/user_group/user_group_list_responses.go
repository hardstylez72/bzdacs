// Code generated by go-swagger; DO NOT EDIT.

package user_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hardstylez72/bzdacs/generated/models"
)

// UserGroupListReader is a Reader for the UserGroupList structure.
type UserGroupListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserGroupListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserGroupListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserGroupListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserGroupListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUserGroupListOK creates a UserGroupListOK with default headers values
func NewUserGroupListOK() *UserGroupListOK {
	return &UserGroupListOK{}
}

/* UserGroupListOK describes a response with status code 200, with default header values.

OK
*/
type UserGroupListOK struct {
	Payload *models.UserGroupListResponse
}

func (o *UserGroupListOK) Error() string {
	return fmt.Sprintf("[POST /v1/user/group/list][%d] userGroupListOK  %+v", 200, o.Payload)
}
func (o *UserGroupListOK) GetPayload() *models.UserGroupListResponse {
	return o.Payload
}

func (o *UserGroupListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserGroupListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserGroupListBadRequest creates a UserGroupListBadRequest with default headers values
func NewUserGroupListBadRequest() *UserGroupListBadRequest {
	return &UserGroupListBadRequest{}
}

/* UserGroupListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UserGroupListBadRequest struct {
	Payload *models.UtilResponseWithError
}

func (o *UserGroupListBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/user/group/list][%d] userGroupListBadRequest  %+v", 400, o.Payload)
}
func (o *UserGroupListBadRequest) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *UserGroupListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserGroupListInternalServerError creates a UserGroupListInternalServerError with default headers values
func NewUserGroupListInternalServerError() *UserGroupListInternalServerError {
	return &UserGroupListInternalServerError{}
}

/* UserGroupListInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UserGroupListInternalServerError struct {
	Payload *models.UtilResponseWithError
}

func (o *UserGroupListInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/user/group/list][%d] userGroupListInternalServerError  %+v", 500, o.Payload)
}
func (o *UserGroupListInternalServerError) GetPayload() *models.UtilResponseWithError {
	return o.Payload
}

func (o *UserGroupListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilResponseWithError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
